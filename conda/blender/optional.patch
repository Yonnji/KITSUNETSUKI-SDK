diff --git a/source/blender/blenlib/BLI_dot_export.hh b/source/blender/blenlib/BLI_dot_export.hh
index 2d6dbb1f600..b1e249859aa 100644
--- a/source/blender/blenlib/BLI_dot_export.hh
+++ b/source/blender/blenlib/BLI_dot_export.hh
@@ -30,7 +30,7 @@
 
 #include "BLI_dot_export_attribute_enums.hh"
 
-#include <optional>
+#include <experimental/optional>
 #include <sstream>
 
 namespace blender::dot {
@@ -195,10 +195,10 @@ class DirectedGraph final : public Graph {
 class NodePort {
  private:
   Node *node_;
-  std::optional<std::string> port_name_;
+    std::experimental::optional<std::string> port_name_;
 
  public:
-  NodePort(Node &node, std::optional<std::string> port_name = {})
+    NodePort(Node &node, std::experimental::optional<std::string> port_name = {})
       : node_(&node), port_name_(std::move(port_name))
   {
   }
diff --git a/source/blender/blenlib/BLI_map.hh b/source/blender/blenlib/BLI_map.hh
index f90d59f45a5..ddf061e51bc 100644
--- a/source/blender/blenlib/BLI_map.hh
+++ b/source/blender/blenlib/BLI_map.hh
@@ -66,7 +66,7 @@
  *   interface as blender::Map. This is useful for benchmarking.
  */
 
-#include <optional>
+#include <experimental/optional>
 #include <unordered_map>
 
 #include "BLI_array.hh"
@@ -363,11 +363,11 @@ class Map {
    * Get the value that is stored for the given key and remove it from the map. If the key is not
    * in the map, a value-less optional is returned.
    */
-  std::optional<Value> pop_try(const Key &key)
+    std::experimental::optional<Value> pop_try(const Key &key)
   {
     return this->pop_try_as(key);
   }
-  template<typename ForwardKey> std::optional<Value> pop_try_as(const ForwardKey &key)
+    template<typename ForwardKey> std::experimental::optional<Value> pop_try_as(const ForwardKey &key)
   {
     return this->pop_try__impl(key, hash_(key));
   }
@@ -1006,11 +1006,11 @@ class Map {
   }
 
   template<typename ForwardKey>
-  std::optional<Value> pop_try__impl(const ForwardKey &key, uint64_t hash)
+  std::experimental::optional<Value> pop_try__impl(const ForwardKey &key, uint64_t hash)
   {
     MAP_SLOT_PROBING_BEGIN (hash, slot) {
       if (slot.contains(key, is_equal_, hash)) {
-        std::optional<Value> value = std::move(*slot.value());
+          std::experimental::optional<Value> value = std::move(*slot.value());
         slot.remove();
         removed_slots_++;
         return value;
diff --git a/source/blender/functions/FN_attributes_ref.hh b/source/blender/functions/FN_attributes_ref.hh
index fe7e59b5e00..71099327ecf 100644
--- a/source/blender/functions/FN_attributes_ref.hh
+++ b/source/blender/functions/FN_attributes_ref.hh
@@ -23,7 +23,7 @@
  * and index.
  */
 
-#include <optional>
+#include <experimental/optional>
 
 #include "FN_spans.hh"
 
@@ -211,7 +211,7 @@ class MutableAttributesRef {
     return this->get<T>(info_->index_of(name));
   }
 
-  std::optional<GMutableSpan> try_get(StringRef name, const CPPType &type) const
+    std::experimental::optional<GMutableSpan> try_get(StringRef name, const CPPType &type) const
   {
     int index = info_->try_index_of(name, type);
     if (index == -1) {
@@ -222,7 +222,7 @@ class MutableAttributesRef {
     }
   }
 
-  template<typename T> std::optional<MutableSpan<T>> try_get(StringRef name) const
+    template<typename T> std::experimental::optional<MutableSpan<T>> try_get(StringRef name) const
   {
     int index = info_->try_index_of(name);
     if (index == -1) {
@@ -302,7 +302,7 @@ class AttributesRef {
     return this->get<T>(info_->index_of(name));
   }
 
-  std::optional<GSpan> try_get(StringRef name, const CPPType &type) const
+    std::experimental::optional<GSpan> try_get(StringRef name, const CPPType &type) const
   {
     int64_t index = info_->try_index_of(name, type);
     if (index == -1) {
@@ -313,7 +313,7 @@ class AttributesRef {
     }
   }
 
-  template<typename T> std::optional<Span<T>> try_get(StringRef name) const
+    template<typename T> std::experimental::optional<Span<T>> try_get(StringRef name) const
   {
     int index = info_->try_index_of(name);
     if (index == -1) {
diff --git a/source/blender/io/common/IO_dupli_persistent_id.hh b/source/blender/io/common/IO_dupli_persistent_id.hh
index 6fabafd9d51..852221cec48 100644
--- a/source/blender/io/common/IO_dupli_persistent_id.hh
+++ b/source/blender/io/common/IO_dupli_persistent_id.hh
@@ -23,7 +23,7 @@
 #include "DNA_object_types.h" /* For MAX_DUPLI_RECUR */
 
 #include <array>
-#include <optional>
+#include <experimental/optional>
 #include <ostream>
 
 namespace blender::io {
diff --git a/source/blender/nodes/intern/node_tree_multi_function.cc b/source/blender/nodes/intern/node_tree_multi_function.cc
index 82842c4ef32..5f5aa9ae369 100644
--- a/source/blender/nodes/intern/node_tree_multi_function.cc
+++ b/source/blender/nodes/intern/node_tree_multi_function.cc
@@ -22,7 +22,7 @@
 namespace blender::nodes {
 
 /* Maybe this should be moved to BKE_node.h. */
-static std::optional<fn::MFDataType> try_get_multi_function_data_type_of_socket(
+    static std::experimental::optional<fn::MFDataType> try_get_multi_function_data_type_of_socket(
     const bNodeSocket *bsocket)
 {
   if (bsocket->typeinfo->get_mf_data_type == nullptr) {
@@ -38,7 +38,7 @@ const fn::MultiFunction &NodeMFNetworkBuilder::get_default_fn(StringRef name)
 
   for (const DInputSocket *dsocket : dnode_.inputs()) {
     if (dsocket->is_available()) {
-      std::optional<fn::MFDataType> data_type = try_get_multi_function_data_type_of_socket(
+        std::experimental::optional<fn::MFDataType> data_type = try_get_multi_function_data_type_of_socket(
           dsocket->bsocket());
       if (data_type.has_value()) {
         input_types.append(*data_type);
@@ -47,7 +47,7 @@ const fn::MultiFunction &NodeMFNetworkBuilder::get_default_fn(StringRef name)
   }
   for (const DOutputSocket *dsocket : dnode_.outputs()) {
     if (dsocket->is_available()) {
-      std::optional<fn::MFDataType> data_type = try_get_multi_function_data_type_of_socket(
+        std::experimental::optional<fn::MFDataType> data_type = try_get_multi_function_data_type_of_socket(
           dsocket->bsocket());
       if (data_type.has_value()) {
         output_types.append(*data_type);
@@ -70,7 +70,7 @@ static void insert_dummy_node(CommonMFNetworkBuilderData &common, const DNode &d
 
   for (const DInputSocket *dsocket : dnode.inputs()) {
     if (dsocket->is_available()) {
-      std::optional<fn::MFDataType> data_type = try_get_multi_function_data_type_of_socket(
+        std::experimental::optional<fn::MFDataType> data_type = try_get_multi_function_data_type_of_socket(
           dsocket->bsocket());
       if (data_type.has_value()) {
         input_types.append(*data_type);
@@ -86,7 +86,7 @@ static void insert_dummy_node(CommonMFNetworkBuilderData &common, const DNode &d
 
   for (const DOutputSocket *dsocket : dnode.outputs()) {
     if (dsocket->is_available()) {
-      std::optional<fn::MFDataType> data_type = try_get_multi_function_data_type_of_socket(
+        std::experimental::optional<fn::MFDataType> data_type = try_get_multi_function_data_type_of_socket(
           dsocket->bsocket());
       if (data_type.has_value()) {
         output_types.append(*data_type);
diff --git a/source/blender/simulation/intern/simulation_collect_influences.cc b/source/blender/simulation/intern/simulation_collect_influences.cc
index 764e587d157..283fae17594 100644
--- a/source/blender/simulation/intern/simulation_collect_influences.cc
+++ b/source/blender/simulation/intern/simulation_collect_influences.cc
@@ -82,7 +82,7 @@ static bool compute_global_inputs(nodes::MFNetworkTreeMap &network_map,
   return true;
 }
 
-static std::optional<Array<std::string>> compute_global_string_inputs(
+    static std::experimental::optional<Array<std::string>> compute_global_string_inputs(
     nodes::MFNetworkTreeMap &network_map, Span<const fn::MFInputSocket *> sockets)
 {
   ResourceCollector local_resources;
@@ -113,7 +113,7 @@ static void find_and_deduplicate_particle_attribute_nodes(nodes::MFNetworkTreeMa
     name_sockets.append(&name_socket);
   }
 
-  std::optional<Array<std::string>> attribute_names = compute_global_string_inputs(network_map,
+  std::experimental::optional<Array<std::string>> attribute_names = compute_global_string_inputs(network_map,
                                                                                    name_sockets);
   if (!attribute_names.has_value()) {
     return;
@@ -160,7 +160,7 @@ class ParticleAttributeInput : public ParticleFunctionInput {
                  fn::MFParamsBuilder &params,
                  ResourceCollector &UNUSED(resources)) const override
   {
-    std::optional<fn::GSpan> span = attributes.try_get(attribute_name_, attribute_type_);
+      std::experimental::optional<fn::GSpan> span = attributes.try_get(attribute_name_, attribute_type_);
     if (span.has_value()) {
       params.add_readonly_single_input(*span);
     }
